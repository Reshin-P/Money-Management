# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: devreshi
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: money
# "service" is the name of this project. This will also be added to your AWS resource names.
service: money
useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage,'develop'}
  lambdaHashingVersion: '20201221'
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}
    TEST_VAR: "test reshi"
    USERS_TABLE: ${self:custom.userTableName}
    EXPENCE_TABLE: ${self:custom.expenceTableName}
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

custom: 
  userTableName: usersTable-${opt:stage,self:provider.stage}
  expenceTableName: expenceTable-${opt:stage,self:provider.stage}
  serverless-offline:
    port: 3000 
plugins:
  - serverless-offline

functions:
  hello:
    handler: handler.hello
    events:
      - httpApi:
          path: /
          method: get
  register:
    handler: handlers/user/user.register
    events:
      - httpApi:
          path: /register
          method: post
  login:
    handler: handlers/user/user.login
    events:
      - httpApi:
          path: /login
          method: post
  addExpense:
    handler: handlers/expense/expense.addExpense
    events:
      - httpApi:
          path: /expense
          method: post
  updateExpense:
    handler: handlers/expense/expense.updateExpense
    events:
      - httpApi:
          path: /expense/{expenseNumber}
          method: put
  deleteExpense:
    handler: handlers/expense/expense.deleteExpense
    events:
      - httpApi:
          path: /expense/{expenseNumber}
          method: delete




resources:
  Resources:
    userTable: 
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.userTableName}

    expenseTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - 
            AttributeName: userEmail
            AttributeType: S
        KeySchema:
          - 
            AttributeName: userEmail
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.expenceTableName}
